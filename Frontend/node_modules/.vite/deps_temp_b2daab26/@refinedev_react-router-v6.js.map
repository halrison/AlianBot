{
  "version": 3,
  "sources": ["../../@refinedev/react-router-v6/src/bindings.tsx", "../../@refinedev/react-router-v6/src/convert-to-number-if-possible.ts", "../../@refinedev/react-router-v6/src/refine-routes.tsx", "../../@refinedev/react-router-v6/src/create-resource-routes.tsx", "../../@refinedev/react-router-v6/src/navigate-to-resource.tsx", "../../@refinedev/react-router-v6/src/unsaved-changes-notifier.tsx", "../../@refinedev/react-router-v6/src/use-prompt-workaround.ts", "../../@refinedev/react-router-v6/src/catch-all-navigate.tsx", "../../@refinedev/react-router-v6/src/document-title-handler.tsx", "../../@refinedev/react-router-v6/src/use-document-title.ts"],
  "sourcesContent": ["import React, { type ComponentProps } from \"react\";\nimport {\n  type GoConfig,\n  type ParseResponse,\n  type RouterBindings,\n  matchResourceFromRoute,\n  ResourceContext,\n} from \"@refinedev/core\";\nimport { useCallback, useContext } from \"react\";\nimport qs from \"qs\";\nimport {\n  useNavigate,\n  useLocation,\n  Link,\n  matchPath,\n  useParams,\n} from \"react-router-dom\";\nimport { convertToNumberIfPossible } from \"./convert-to-number-if-possible\";\n\nexport const stringifyConfig = {\n  addQueryPrefix: true,\n  skipNulls: true,\n  arrayFormat: \"indices\" as const,\n  encode: false,\n  encodeValuesOnly: true,\n};\n\nexport const routerBindings: RouterBindings = {\n  go: () => {\n    const { search: existingSearch, hash: existingHash } = useLocation();\n    const navigate = useNavigate();\n\n    const fn = useCallback(\n      ({\n        to,\n        type,\n        query,\n        hash,\n        options: { keepQuery, keepHash } = {},\n      }: GoConfig) => {\n        /** Construct query params */\n        const urlQuery = {\n          ...(keepQuery &&\n            existingSearch &&\n            qs.parse(existingSearch, { ignoreQueryPrefix: true })),\n          ...query,\n        };\n\n        if (urlQuery.to) {\n          urlQuery.to = encodeURIComponent(`${urlQuery.to}`);\n        }\n\n        const hasUrlQuery = Object.keys(urlQuery).length > 0;\n\n        /** Get hash */\n        const urlHash = `#${(hash || (keepHash && existingHash) || \"\").replace(\n          /^#/,\n          \"\",\n        )}`;\n\n        const hasUrlHash = urlHash.length > 1;\n\n        const urlTo = to || \"\";\n\n        const fullPath = `${urlTo}${\n          hasUrlQuery ? qs.stringify(urlQuery, stringifyConfig) : \"\"\n        }${hasUrlHash ? urlHash : \"\"}`;\n\n        if (type === \"path\") {\n          return fullPath;\n        }\n\n        /** Navigate to the url */\n        return navigate(fullPath, {\n          replace: type === \"replace\",\n        });\n      },\n      [existingHash, existingSearch, navigate],\n    );\n\n    return fn;\n  },\n  back: () => {\n    const navigate = useNavigate();\n\n    const fn = useCallback(() => {\n      navigate(-1);\n    }, [navigate]);\n\n    return fn;\n  },\n  parse: () => {\n    let params = useParams();\n    const { pathname, search } = useLocation();\n    const { resources } = useContext(ResourceContext);\n\n    const { resource, action, matchedRoute } = React.useMemo(() => {\n      return matchResourceFromRoute(pathname, resources);\n    }, [resources, pathname]);\n\n    // params is empty when useParams is used in a component that is not a child of a Route\n    if (Object.entries(params).length === 0 && matchedRoute) {\n      params = matchPath(matchedRoute, pathname)?.params || {};\n    }\n\n    const fn = useCallback(() => {\n      const parsedSearch = qs.parse(search, { ignoreQueryPrefix: true });\n\n      const combinedParams = {\n        ...params,\n        ...parsedSearch,\n      };\n\n      const response: ParseResponse = {\n        ...(resource && { resource }),\n        ...(action && { action }),\n        ...(params?.id && { id: decodeURIComponent(params.id) }),\n        // ...(params?.action && { action: params.action }), // lets see if there is a need for this\n        pathname,\n        params: {\n          ...combinedParams,\n          current: convertToNumberIfPossible(\n            combinedParams.current as string,\n          ) as number | undefined,\n          pageSize: convertToNumberIfPossible(\n            combinedParams.pageSize as string,\n          ) as number | undefined,\n          to: combinedParams.to\n            ? decodeURIComponent(combinedParams.to as string)\n            : undefined,\n        },\n      };\n\n      return response;\n    }, [pathname, search, params, resource, action]);\n\n    return fn;\n  },\n  Link: React.forwardRef<\n    HTMLAnchorElement,\n    ComponentProps<NonNullable<RouterBindings[\"Link\"]>>\n  >(function RefineLink(props, ref) {\n    return <Link {...props} ref={ref} />;\n  }),\n};\n", "export const convertToNumberIfPossible = (value: string | undefined) => {\n  if (typeof value === \"undefined\") {\n    return value;\n  }\n  const num = Number(value);\n  if (`${num}` === value) {\n    return num;\n  }\n  return value;\n};\n", "import React from \"react\";\nimport { useResource } from \"@refinedev/core\";\nimport { createResourceRoutes } from \"./create-resource-routes\";\nimport { Routes } from \"react-router-dom\";\n\ntype RefineRoutesProps = {\n  children?: (routes: JSX.Element[]) => JSX.Element;\n};\n\nexport const RefineRoutes = ({ children }: RefineRoutesProps) => {\n  const { resources: resourcesFromContext } = useResource();\n\n  const routes = React.useMemo(() => {\n    return createResourceRoutes(resourcesFromContext);\n  }, [resourcesFromContext]);\n\n  return children ? children(routes) : <Routes>{routes}</Routes>;\n};\n", "import React from \"react\";\nimport type { Action, ResourceProps } from \"@refinedev/core\";\n\nimport { Route } from \"react-router-dom\";\n\nexport const createResourcePathWithAction = (\n  resource: ResourceProps,\n  action: Action,\n) => {\n  const { name, list, create, show, edit } = resource;\n\n  if (typeof list === \"string\" && action === \"list\") {\n    return list;\n  }\n  if (typeof list === \"object\" && action === \"list\") {\n    return list.path;\n  }\n  if (typeof create === \"string\" && action === \"create\") {\n    return create;\n  }\n  if (typeof create === \"object\" && action === \"create\") {\n    return create.path;\n  }\n  if (typeof show === \"string\" && action === \"show\") {\n    return show;\n  }\n  if (typeof show === \"object\" && action === \"show\") {\n    return show.path;\n  }\n  if (typeof edit === \"string\" && action === \"edit\") {\n    return edit;\n  }\n  if (typeof edit === \"object\" && action === \"edit\") {\n    return edit.path;\n  }\n\n  /**\n   * Default path fallback\n   */\n  const nameSegment = `/${name}`;\n  const actionSegment = `${\n    [\"edit\", \"create\", \"clone\", \"show\"].includes(action) ? action : \"\"\n  }`;\n  const idSegment = `${\n    [\"edit\", \"show\", \"clone\"].includes(action) ? \":id\" : \"\"\n  }`;\n\n  return [nameSegment, actionSegment, idSegment].filter(Boolean).join(\"/\");\n};\n\nexport const createResourceRoutes = (resources: ResourceProps[]) => {\n  const routes = resources.flatMap((resource) => {\n    const actions: {\n      action: Action;\n      element: React.ComponentType<any>;\n      path: string;\n    }[] = [];\n\n    ([\"list\", \"show\", \"edit\", \"create\"] as const).forEach((action) => {\n      const item = resource[action];\n      if (typeof item !== \"undefined\" && typeof item !== \"string\") {\n        const element = typeof item === \"function\" ? item : item.component;\n        const path = createResourcePathWithAction(resource, action);\n\n        actions.push({ action, element: element, path });\n        if (action === \"create\") {\n          actions.push({\n            action: \"clone\",\n            element: element,\n            path,\n          });\n        }\n      }\n    });\n\n    return actions.map(({ action, element: Component, path }) => {\n      const element = <Component />;\n\n      return <Route key={`${action}-${path}`} path={path} element={element} />;\n    });\n  });\n\n  return routes;\n};\n", "import { useResource, useGetToPath } from \"@refinedev/core\";\nimport React, { type PropsWithChildren } from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\ntype NavigateToResourceProps = PropsWithChildren<{\n  resource?: string;\n  meta?: Record<string, unknown>;\n}>;\n\nexport const NavigateToResource: React.FC<NavigateToResourceProps> = ({\n  resource: resourceProp,\n  meta,\n}) => {\n  const getToPath = useGetToPath();\n  const { resource, resources } = useResource(resourceProp);\n\n  const toResource = resource || resources.find((r) => r.list);\n\n  if (toResource) {\n    const path = getToPath({\n      resource: toResource,\n      action: \"list\",\n      meta,\n    });\n\n    if (path) {\n      return <Navigate to={path} />;\n    }\n\n    console.warn(\"No resource is found to navigate to.\");\n    return null;\n  }\n  console.warn(\"No resource is found to navigate to.\");\n  return null;\n};\n", "import React from \"react\";\nimport { useTranslate, useWarnAboutChange } from \"@refinedev/core\";\nimport { usePrompt } from \"./use-prompt-workaround\";\nimport { useLocation } from \"react-router-dom\";\n\ntype UnsavedChangesNotifierProps = {\n  translationKey?: string;\n  message?: string;\n};\n\nexport const UnsavedChangesNotifier: React.FC<UnsavedChangesNotifierProps> = ({\n  translationKey = \"warnWhenUnsavedChanges\",\n  message = \"Are you sure you want to leave? You have unsaved changes.\",\n}) => {\n  const translate = useTranslate();\n  const { pathname } = useLocation();\n  const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n  React.useEffect(() => {\n    return () => setWarnWhen?.(false);\n  }, [pathname]);\n\n  const warnMessage = React.useMemo(() => {\n    return translate(translationKey, message);\n  }, [translationKey, message, translate]);\n\n  usePrompt(warnMessage, warnWhen, () => {\n    setWarnWhen?.(false);\n  });\n\n  return null;\n};\n", "/**\n * `useBlocker` and `usePrompt` is no longer part of react-router-dom for the routers other than `DataRouter`.\n *\n * The previous workaround (<v6.4) was to use `block` function in `UNSAFE_NavigationContext` which is now removed.\n *\n * We're using a workaround from the gist https://gist.github.com/MarksCode/64e438c82b0b2a1161e01c88ca0d0355 with some modifications\n * Thanks to @MarksCode(https://github.com/MarksCode) for the workaround.\n */\n\nimport React from \"react\";\nimport { UNSAFE_NavigationContext as NavigationContext } from \"react-router-dom\";\n\nfunction useConfirmExit(confirmExit: () => boolean, when = true) {\n  const { navigator } = React.useContext(NavigationContext);\n\n  React.useEffect(() => {\n    if (!when) {\n      return;\n    }\n\n    const go = navigator.go;\n    const push = navigator.push;\n\n    navigator.push = (...args: Parameters<typeof push>) => {\n      const result = confirmExit();\n      if (result !== false) {\n        push(...args);\n      }\n    };\n\n    navigator.go = (...args: Parameters<typeof go>) => {\n      const result = confirmExit();\n      if (result !== false) {\n        go(...args);\n      }\n    };\n\n    return () => {\n      navigator.push = push;\n      navigator.go = go;\n    };\n  }, [navigator, confirmExit, when]);\n}\n\nexport function usePrompt(\n  message: string,\n  when = true,\n  onConfirm?: () => void,\n  legacy = false,\n) {\n  const warnWhenListener = React.useCallback(\n    (e: { preventDefault: () => void; returnValue: string }) => {\n      e.preventDefault();\n\n      e.returnValue = message;\n\n      return e.returnValue;\n    },\n    [message],\n  );\n\n  React.useEffect(() => {\n    if (when && !legacy) {\n      window.addEventListener(\"beforeunload\", warnWhenListener);\n    }\n\n    return () => {\n      window.removeEventListener(\"beforeunload\", warnWhenListener);\n    };\n  }, [warnWhenListener, when, legacy]);\n\n  const confirmExit = React.useCallback(() => {\n    const confirm = window.confirm(message);\n    if (confirm && onConfirm) {\n      onConfirm();\n    }\n    return confirm;\n  }, [message]);\n\n  useConfirmExit(confirmExit, when);\n}\n", "import React from \"react\";\nimport { Navigate, useLocation } from \"react-router-dom\";\n\n/**\n * A component that will navigate to the given path with `to` query parameter included with the current location.\n */\nexport const CatchAllNavigate: React.FC<{ to: string }> = ({ to }) => {\n  const { pathname, search } = useLocation();\n\n  const queryValue = `${pathname}${search}`;\n\n  const query =\n    queryValue.length > 1 ? `?to=${encodeURIComponent(queryValue)}` : \"\";\n\n  return <Navigate to={`${to}${query}`} />;\n};\n", "import {\n  type Action,\n  type IResourceItem,\n  useParsed,\n  useTranslate,\n  generateDefaultDocumentTitle,\n  useUserFriendlyName,\n} from \"@refinedev/core\";\nimport React, { useLayoutEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\ntype Props = {\n  handler?: (options: {\n    resource?: IResourceItem;\n    action?: Action;\n    params?: Record<string, string | undefined>;\n    pathname?: string;\n    autoGeneratedTitle: string;\n  }) => string;\n};\n\nexport function DocumentTitleHandler({ handler }: Props) {\n  const location = useLocation();\n  const { action, id, params, pathname, resource } = useParsed();\n  const translate = useTranslate();\n  const getUserFriendlyName = useUserFriendlyName();\n\n  const identifier = resource?.identifier ?? resource?.name;\n  const resourceName =\n    resource?.label ??\n    resource?.meta?.label ??\n    getUserFriendlyName(identifier, action === \"list\" ? \"plural\" : \"singular\");\n\n  useLayoutEffect(() => {\n    const autoGeneratedTitle = generateDefaultDocumentTitle(\n      translate,\n      resource!,\n      action,\n      `${id}`,\n      resourceName,\n    );\n    if (handler) {\n      document.title = handler({\n        action,\n        resource,\n        params,\n        pathname,\n        autoGeneratedTitle,\n      });\n    } else {\n      document.title = autoGeneratedTitle;\n    }\n  }, [location]);\n\n  return <></>;\n}\n", "import { useTranslate } from \"@refinedev/core\";\nimport { useEffect } from \"react\";\n\ntype Title = string | { i18nKey: string };\n\nexport const useDocumentTitle = (title?: Title) => {\n  const translate = useTranslate();\n\n  useEffect(() => {\n    if (!title) return;\n\n    if (typeof title === \"string\") {\n      document.title = translate(title);\n    } else {\n      document.title = translate(title.i18nKey);\n    }\n  }, [title]);\n\n  return (title: Title) => {\n    if (typeof title === \"string\") {\n      document.title = translate(title);\n    } else {\n      document.title = translate(title.i18nKey);\n    }\n  };\n};\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_react", "import_react", "import_react", "import_react", "import_react", "import_react", "import_react", "convertToNumberIfPossible", "value", "num", "stringifyConfig", "routerBindings", "existingSearch", "existingHash", "useLocation", "navigate", "useNavigate", "useCallback", "to", "type", "query", "hash", "keepQuery", "keepHash", "urlQuery", "qs", "hasUrlQuery", "urlHash", "hasUrlHash", "fullPath", "_a", "params", "useParams", "pathname", "search", "resources", "useContext", "ResourceContext", "resource", "action", "matchedRoute", "React", "matchResourceFromRoute", "matchPath", "parsedSearch", "combinedParams", "props", "ref", "Link", "createResourcePathWithAction", "name", "list", "create", "show", "edit", "nameSegment", "actionSegment", "idSegment", "createResourceRoutes", "actions", "item", "element", "path", "Component", "Route", "RefineRoutes", "children", "resourcesFromContext", "useResource", "routes", "Routes", "NavigateToResource", "resourceProp", "meta", "getToPath", "useGetToPath", "toResource", "r", "Navigate", "useConfirmExit", "confirmExit", "when", "navigator", "NavigationContext", "go", "push", "args", "usePrompt", "message", "onConfirm", "legacy", "warnWhenListener", "e", "confirm", "UnsavedChangesNotifier", "translationKey", "translate", "useTranslate", "warnWhen", "setWarnWhen", "useWarnAboutChange", "warnMessage", "CatchAllNavigate", "queryValue", "DocumentTitleHandler", "handler", "location", "id", "useParsed", "getUserFriendlyName", "useUserFriendlyName", "identifier", "resourceName", "useLayoutEffect", "autoGeneratedTitle", "generateDefaultDocumentTitle", "useDocumentTitle", "title", "useEffect"]
}
